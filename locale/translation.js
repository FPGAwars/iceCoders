// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Decoders');
gettext('Encoders');
gettext('Decod-1-2');
gettext('Decod-2-4');
gettext('Decod-3-8');
gettext('Decod-1-2-bus-neg');
gettext('Decoder-1-2-bus-neg:  1 to 2 decoder. Output bus. Active low');
gettext('Bus2-Join-all: Joint two wires into a 2-bits Bus');
gettext('not-x2: 2-bits not gate');
gettext('Bus2-Split-all: Split the 2-bits bus into two wires');
gettext('NOT gate (Verilog implementation)');
gettext('Decoder-1-2:  1 to 2 decoder');
gettext('Input');
gettext('Output');
gettext('## Truth table\n\n|i  |  o1 | o0 |\n|---|-----|----|\n|0  |  0  |  1 |\n|1  |  1  |  0 |');
gettext('Decod-1-2-bus');
gettext('Decoder-1-2-bus:  1 to 2 decoder. Output bus');
gettext('Decod-1-2-neg');
gettext('Decoder-1-2:  1 to 2 decoder. The outputs are active low');
gettext('## Truth table\n\n|i  |  o1 | o0 |\n|---|-----|----|\n|0  |  1  |  0 |\n|1  |  0  |  1 |');
gettext('Decod-1-2-verilog');
gettext('Decoder-1-2:  1 to 2 decoder. Verilog implementation');
gettext('Decod-1-2');
gettext('Decod-2-4-bus-neg');
gettext('Decoder-2-4:  2 to 4 decoder. Output bus. Active low');
gettext('not-x4: 4-bits not gate');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('Decoder-2-4:  2 to 4 decoder. Output bus');
gettext('Decoder-2-4:  2 to 4 binary decoder');
gettext('Two bits input And gate');
gettext('## Truth table\n\n| input  |  o3 | o2 | o1 | o0 |\n|--------|-----|----|----|----|\n| 00     |   0 | 0  |  0 | 1  |\n| 01     |   0 | 0  |  1 | 0  |\n| 10     |   0 | 1  |  0 | 0  |\n| 11     |   1 | 0  |  0 | 0  |\n\n');
gettext('Decod-2-4-bus');
gettext('Decod-2-4-neg');
gettext('Decoder-2-4-neg:  2 to 4 decoder. The outputs are active low');
gettext('Decod-2-4-verilog');
gettext('Decoder-2-4:  2 to 4 binary decoder. Verilog implementation');
gettext('Decod-2-4');
gettext('Decod-3-8-bus-neg');
gettext('Decoder-3-8:  3 to 8 decoder. Output bus. Outputs are active low');
gettext('not-x8: 8-bits not gate');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of the same size');
gettext('Bus8-Join-half: Join the two same halves into an 8-bits Bus');
gettext('Decoder-3-8:  3 to 8 decoder. Output bus');
gettext('Bus8-Join-all: Join all the wires into a 8-bits Bus');
gettext('Decoder-3-8:  3 to 8 decoder');
gettext('Bus3-Split-1-2: Split the 3-bits bus into two: 1-bit and 2-bits buses');
gettext('Decoder-2-4:  2 to 4 decoder');
gettext('AND-Busen-4: Enable a 4-bits bus. When the enable signal is 0, the output is 0');
gettext('Active when the input  \nis 4-7');
gettext('Active when the input  \nis 0-3');
gettext('## Truth table\n\n| input   |  o7     | o6     | o5     | o4     | o3     | o2    | o1     | o0     |\n|---------|---------|--------|--------|--------|--------|-------|--------|--------|\n| 000     |   0     | 0      |  0     | 0      | 0      | 0     |  0     | **1**  |\n| 001     |   0     | 0      |  0     | 0      | 0      | 0     |  **1** | 0      |\n| 010     |   0     | 0      |  0     | 0      | 0      | **1** |  0     | 0      |\n| 011     |   0     | 0      |  0     | 0      | **1**  | 0     |  0     | 0      |\n| 100     |   0     | 0      |  0     | **1**  | 0      | 0     |  0     | 0      |\n| 101     |   0     | 0      |  **1** | 0      | 0      | 0     |  0     | 0      |\n| 110     |   0     | **1**  |  0     | 0      | 0      | 0     |  0     | 0      |\n| 111     |   **1** | 0      |  0     | 0      | 0      | 0     |  0     | 0      |\n\n');
gettext('Enable input');
gettext('Bus input');
gettext('Bus output');
gettext('Decod-3-8-bus');
gettext('Decod-3-8-neg');
gettext('Decoder-3-8:  3 to 8 decoder. Outputs are active low');
gettext('Decod-3-8-verilog');
gettext('Decoder-3-8:  3 to 8 decoder. Verilog implementation');
gettext('Decod-3-8');
gettext('Encoders-2-1');
gettext('Encoders-4-2');
gettext('Encoders-8-3');
gettext('encoder-2-1-bus-neg');
gettext('A 2-to-1 encoder with active low inputs in a bus and nz (not-zero) output');
gettext('A 2-to-1 encoder with bus inputs and nz (not-zero) output');
gettext('A standard 2-to-1 encoder with nz (not-zero) output');
gettext('OR2: Two bits input OR gate');
gettext('Encoder-2-1');
gettext('2-1 Encoder');
gettext('## Truth table\n\n| i1 | i0 | out | nz |\n|----|----|-----|----|\n| 0  | 0  |  0  | 0  |\n| 0  | 1  |  0  | 1  |\n| 1  | 0  |  1  | 1  |\n| 1  | 1  |  1  | 1  |');
gettext('encoder-2-1-bus');
gettext('encoder-2-1-neg');
gettext('A 2-to-1 encoder with active low inputs and nz (not-zero) output');
gettext('## Truth table\n\n| i1 | i0 | out | nz | Description   |\n|----|----|-----|----|----|\n| 1  | 1  |  0  | 0  | No active inputs |\n| 1  | 0  |  0  | 1  | Input 0 active |\n| 0  | 1  |  1  | 1  | Input 1 active |\n| 0  | 0  |  1  | 1  | Input 1 active |');
gettext('encoder-2-1-verilog');
gettext('A standard 2-to-1 encoder with nz (not-zero) output. Implemented in verilog');
gettext('encoder-2-1');
gettext('Encoder-4-2-Bus-neg');
gettext('4 to 2 binary Enconder with priority. Input and output Buses. Low active inputs');
gettext('4 to 2 binary Enconder with priority. Input and output Buses');
gettext('4 to 2 binary Enconder with priority');
gettext('2-to-1 Multplexer (1-bit channels)');
gettext('Mux-2-1');
gettext('Encoder-4-2-Bus');
gettext('Encoder-4-2-Verilog');
gettext('4 to 2 binary Enconder with priority. Verilog implementation');
gettext('Encoder-4-2-neg');
gettext('4 to 2 binary Enconder with priority. Low active inputs');
gettext('Encoder-4-2');
gettext('Encoder-8-3-Bus-neg');
gettext('8 to 3 binary Enconder with priority. Active low inputs. Input and Output buses');
gettext('8 to 3 binary Enconder with priority. Input and Output buses');
gettext('8 to 3 binary Enconder with priority');
gettext('2-to-1 Multplexer (2-bit channels)');
gettext('Bus8-Split-all: Split the 8-bits bus into its wires');
gettext('Bus3-Join-all: Joint three wires into a 3-bits Bus');
gettext('Channel A');
gettext('Channel B');
gettext('Encoder-8-3-Bus');
gettext('Encoder-8-3-neg');
gettext('8 to 3 binary Enconder with priority. Active low inputs');
gettext('Encoder-8-3-verilog');
gettext('8 to 3 binary Enconder with priority. Implemented in Verilog');
gettext('Encoder-8-3');
gettext('01-Encoder-2-1');
gettext('02-Encoder-2-1-Bus-neg');
gettext('03-Encoder-4-2');
gettext('04-Encoder-4-2-Bus-neg');
gettext('05-Encoder-8-3');
gettext('06-Encoder-8-3-Bus-neg');
gettext('07-Decoder-1-2');
gettext('08-Decoder-1-2-Bus-neg');
gettext('09-Decoder-2-4');
gettext('10-Decoder-2-4-Bus-neg');
gettext('11-Decoder-3-8');
gettext('12-Decoder-3-8');
gettext('TESTs');
gettext('00-Index');
gettext('# INDEX: IceCoders Collection');
gettext('## DECODERS');
gettext('**Decoder-1-2**');
gettext('**Decoder-1-2-neg**');
gettext('**Decoder-1-2-Bus**');
gettext('**Decoder-1-2-Bus-neg**');
gettext('**Decoder-2-4**');
gettext('**Decoder-2-4-neg**');
gettext('**Decoder-2-4-Bus**');
gettext('**Decoder-2-4-Bus-neg**');
gettext('**Decoder-3-8**');
gettext('**Decoder-3-8-neg**');
gettext('**Decoder-3-8-bus**');
gettext('**Decoder-3-8-bus-neg**');
gettext('## ENCODERS ');
gettext('**Encoder 2-1**');
gettext('**Encoder 2-1-bus**');
gettext('**Encoder 2-1-neg**');
gettext('**Encoder 2-1-bus-neg**');
gettext('**Encoder 4-2**');
gettext('**Encoder 4-2-Bus**');
gettext('**Encoder 4-2-Neg**');
gettext('**Encoder 4-2-Bus-eg**');
gettext('**Encoder-3-8**');
gettext('**Encoder-3-8-neg**');
gettext('**Encoder 8-3-Bus**');
gettext('**Encoder 8-3-Bus-eg**');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('01-Enconder-2-1-buttons-LEDs');
gettext('## Example: Manual testing of the 2-to-1 Encoder\n\nTwo pushbuttons are used as the inputs of the 2-to-1 enconder. The  \ncodified output (1-bit) is shown on LED7 and the nz output on LED0');
gettext('Ouput: 1-bit');
gettext('Active if any input is active');
gettext('**2-1 Encoder**');
gettext('Input 1');
gettext('Input 0');
gettext('01-Enconder-2-1-buttons-LEDs');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('02-Encoder-2-1-Bus-neg-with-buttons-LEDs');
gettext('Pull-upx2_ICE40: 2 internal pull-up configuration on the input port. ICE40 FPGA family');
gettext('Pull-up_ICE40:: FPGA internal pull-up configuration on the input port. ICE40 FPGA family');
gettext('# Example: Manual testing of the Encoder-2-1-Bus-neg\n\nIt works exactly as the example 1, but the buttons are external (connected with pull-ups) and  \nconnected by a 2-bits bus');
gettext('Buttons');
gettext('Pull-ups');
gettext('Encoder-2-1-bus-neg');
gettext('The pull-ups are connected  \nby default');
gettext('### Pull-up parameter:\n\n0: No pull-up  \n1: Pull-up activated');
gettext('Only an FPGA pin can  \nbe connected here!!!');
gettext('The pull-up is connected  \nby default');
gettext('02-Encoder-2-1-Bus-neg-with-buttons-LEDs');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('03-Encoder-2-4-with-buttons-LEDs');
gettext('Button-tic: Configurable button that emits a tic when it is pressed');
gettext('Rising-edge detector. It generates a 1-period pulse (tic) when a rising edge is detected on the input');
gettext('D Flip-flop (verilog implementation)');
gettext('Configurable button (pull-up on/off. Not on/off)');
gettext('FPGA internal pull-up configuration on the input port');
gettext('Remove the rebound on a mechanical switch');
gettext('1bit register (implemented in verilog)');
gettext('16-bits Syscounter with reset');
gettext('DFF-rst-x16: 16 D flip-flops in paralell with reset');
gettext('DFF-rst-x04: Three D flip-flops in paralell with reset');
gettext('DFF-rst-x01: D Flip flop with reset input. When rst=1, the DFF is 0');
gettext('Bus16-Split-quarter: Split the 16-bits bus into four buses of the same size');
gettext('Bus16-Join-quarter: Join the four same buses into an 16-bits Bus');
gettext('Inc1-16bit: Increment a 16-bits number by one');
gettext('AdderK-16bit: Adder of 16-bit operand and 16-bit constant');
gettext('Generic: 16-bits generic constant');
gettext('Adder-16bits: Adder of two operands of 16 bits');
gettext('Bus16-Split-half: Split the 16-bits bus into two buses of the same size');
gettext('Adder-8bits: Adder of two operands of 8 bits');
gettext('Adder-4bits: Adder of two operands of 4 bits');
gettext('Adder-1bit: Adder of two operands of 1 bit');
gettext('AdderC-1bit: Adder of two operands of 1 bit plus the carry in');
gettext('XOR gate: two bits input xor gate');
gettext('Constant bit 0');
gettext('AdderC-4bits: Adder of two operands of 4 bits and Carry in');
gettext('AdderC-8bits: Adder of two operands of 8 bits and Carry in');
gettext('Bus16-Join-half: Join the two same halves into an 16-bits Bus');
gettext('Edges detector. It generates a 1-period pulse (tic) when either a rising edge or a falling edge is detected on the input');
gettext('Sync 1-bit input with the system clock domain');
gettext('Select positive or negative logic for the input (0=positive, 1=negative)');
gettext('1-bit generic constant (0/1)');
gettext('Reg: 1-Bit register');
gettext('2-to-1 Multplexer (1-bit channels). Fippled version');
gettext('# Example: Manual testing of the Encoder-4-2\n\nSend the pattern 0000, 0001, 0010, 0100, 1000 to the enconder. The output is shown on the LEDs:  \n00 (nz=0), 00 (nz=1), 01 (nz=1), 10 (nz=1), 11 (nz=1)');
gettext('Generate the bit pattern, with a shift  \nregister');
gettext('2-bits Encoded number');
gettext('System clock');
gettext('Button state signal');
gettext('Tic: button pressed');
gettext('Rising edge detector');
gettext('Pull up on/off');
gettext('Not on/off');
gettext('## Rising edge detector\n\nIt generates a 1-period pulse (tic) when a rising edge is detected on the  \ninput signal');
gettext('Input signal');
gettext('Current signal  \nstate');
gettext('Signal state in the previous  \nclock cycle');
gettext('If the current signal is 1 and its value in  \nthe previous clock cycle was 0, it means  \nthat a rising edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a rising edge  \nand its detection');
gettext('Parameter: Initial value');
gettext('Input data');
gettext('# D Flip-Flop  \n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Internal pull-up  \n* 0: OFF\n* 1: ON');
gettext('Synchronization stage');
gettext('Normalization stage\n\n* 0: Wire\n* 1: signal inverted');
gettext('Debouncing stage');
gettext('Edge detector');
gettext('Whenever there is a change in  \nthe input, the counter is started');
gettext('If the counter reaches it maximum  \nvalue, the input is considered stable  \nand it is captured');
gettext('### Time calculation\n\nFor CLK=12MHZ, a 16-bit counter reaches its  \nmaximum every 2 ** 16 * 1/F = 5.5ms aprox  \nIF more time is needed for debouncing,  \nuse a counter with more bits (17, 18...)');
gettext('## Debouncer  \n\nA value is considered stable when  \nthere is no changes during 5.5ms  \naprox. When a value is stable it is  \ncaptured on the output flip-flop');
gettext('Stable output');
gettext('Counter');
gettext('Initial value');
gettext('Reset input: Active high  \nWhen rst = 1, the DFF is reset to 0');
gettext('Data input');
gettext('Initial default  \nvalue: 0');
gettext('## Edges detector\n\nIt generates a 1-period pulse (tic) when an edge (Rising or falling) is detected on the  \ninput signal');
gettext('The output is 1 if the current value is 1 and the  \nprevious 0, or if the current value is 0 and the  \nprevious 1\n');
gettext('In any other case the output is 0');
gettext('When k=0, it works like a wire  \n(The output is equal to the input)  \nWhen k=1, it act as a not gate\n(The output is the inverse of the input)');
gettext('### Truth table for XOR\n\n| k | input | output | function |\n|---|-------|--------|----------|\n| 0 | 0     |  0     | wire     |\n| 0 | 1     |  1     | wire     |\n| 1 | 0     |  1     | Not      |\n| 1 | 1     |  0     | Not      |');
gettext('Mux 2-1');
gettext('D Flip-flip\n(System)');
gettext('03-Encoder-2-4-with-buttons-LEDs');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('04-Encoder-4-2-with-buttons-LEDs');
gettext('4 FPGA internal pull-ups');
gettext('# Example: Manual testing of the Encoder-4-2-Bus-neg\n\nThe four external buttons are encoded into 2-bits and displayed on the LEDs');
gettext('04-Encoder-4-2-with-buttons-LEDs');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('05-Encoder-8-3-with-buttons-LEDs');
gettext('SReg-right-x8: 8 bits Shift register (to the right)');
gettext('SReg-right-x4: 4 bits Shift register (to the right)');
gettext('# Example: Manual testing of the Encoder-8-3\n\nSend the pattern 00000000, 10000000, 01000000, 00100000, 00010000, 00001000, 00000100, 00000010, 00000001 to the enconder.  \nThe output is shown on the LEDs:  000 (nz=0), 111 (nz=1), 110 (nz=1), 101 (nz=1), 100 (nz=1), 011 (nz=1), 010 (nz=1), 001 (nz=1)');
gettext('3-bits Encoded number');
gettext('8-bits Shift-register');
gettext('05-Encoder-8-3-with-buttons-LEDs');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('05-Encoder-8-3-with-buttons-LEDs');
gettext('8 FPGA internal pull-ups');
gettext('# Example: Manual testing of the Encoder-8-3-Bus-neg\n\nThe eight external buttons are encoded into 3-bits and displayed on the LEDs');
gettext('06-Encoder-8-3-with-buttons-LEDs');
gettext('Alhambra-II');
gettext('07-Decoder-1-2-button-LED');
gettext('# Example: Decoder 1-2: Manual testing\n\nWhen the button is pressed, the LED1 is ON and the LED0 is OFF.  \nWhen the buton not pressed, the LED1 is OFF and the LED0 is ON');
gettext('Alhambra-II');
gettext('08-Decoder-1-2-Bus-neg-button-LED');
gettext('# Example: Decoder 1-2-bus-neg: Manual testing\n\nWhen the button is pressed, the LED1 is OFF and the LED0 is ON.  \nWhen the buton not pressed, the LED1 is ON and the LED0 is OFF');
gettext('Alhambra-II');
gettext('09-Decoder-2-4-button-LEDs');
gettext('# Example: Decoder 2-4: Manual testing\n\n');
gettext('Alhambra-II');
gettext('10-Decoder-2-4-Bus-neg-buttons-LEDs');
gettext('# Example: Decoder 2-4-bus-neg: Manual testing\n\n');
gettext('Decoder 2-4-Bus-neg');
gettext('Alhambra-II');
gettext('11-Decoder-3-8-button-LEDs');
gettext('Counter-x03: 3-bits counter');
gettext('Reg-x03: 3-bits register');
gettext('Bus3-Split-all: Split the 3-bits bus into three wires');
gettext('Inc1-3bit: Increment a 3-bits number by one');
gettext('AdderK-3bit: Adder of 3-bit operand and 3-bit constant');
gettext('Generic: 3-bits generic constant (0-7)');
gettext('Adder-3bits: Adder of two operands of 3 bits');
gettext('# Example: 3-8: Manual testing\n\nThe numbers 0 - 7 are sent to the decoder. The decoded number is shown on  \nLEDs 0 - 7. The number to decode is increased by 1 when the button is pressed');
gettext('3-bits counter');
gettext('3-8 Decoder');
gettext('Alhambra-II');
gettext('12-Decoder-3-8-bus-neg-buttons-LEDs');
gettext('# Example: Decoder 3-8-bus-neg: Manual testing\n\n');
gettext('Decoders');
gettext('Encoders');
gettext('Decoders-1-2');
gettext('Decoders-2-4');
gettext('Decoders-3-8');
gettext('Decoder-1-2');
gettext('Decoder-1-2-Bus');
gettext('Decoder-1-2-Bus-neg');
gettext('Decoder-1-2-neg');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# Decoder 1-2-bus-neg: Manual testing\n\nWhen the button is pressed, the LED1 is OFF and the LED0 is ON.  \nWhen the buton not pressed, the LED1 is ON and the LED0 is OFF');
gettext('01-manual-testing');
gettext('# Decoder 1-2-bus: Manual testing\n\nWhen the button is pressed, the LED1 is ON and the LED0 is OFF.  \nWhen the buton not pressed, the LED1 is OFF and the LED0 is ON');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# Decoder 1-2-neg: Manual testing\n\nWhen the button is pressed, the LED1 is OFF and the LED0 is ON.  \nWhen the buton not pressed, the LED1 is ON and the LED0 is OFF');
gettext('01-manual-testing');
gettext('# Decoder 1-2: Manual testing\n\nWhen the button is pressed, the LED1 is ON and the LED0 is OFF.  \nWhen the buton not pressed, the LED1 is OFF and the LED0 is ON');
gettext('Decoder-2-4');
gettext('Decoder-2-4-Bus');
gettext('Decoder-2-4-Bus-neg');
gettext('Decoder-2-4-neg');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# Decoder 2-4-bus-neg: Manual testing\n\n');
gettext('01-manual-testing');
gettext('# Decoder 2-4-bus: Manual testing\n\n');
gettext('01-manual-testing');
gettext('# Decoder 2-4-neg: Manual testing\n\n');
gettext('01-manual-testing');
gettext('# Decoder 2-4: Manual testing\n\n');
gettext('Decoder-3-8');
gettext('Decoder-3-8-Bus');
gettext('Decoder-3-8-Bus-neg');
gettext('Decoder-3-8-neg');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# Decoder 3-8-bus: Manual testing\n\n');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# Decoder 3-8-neg: Manual testing\n\n');
gettext('01-manual-testing');
gettext('# Decoder 3-8: Manual testing\n\n');
gettext('Encoder-4-2');
gettext('Encoder-8-3');
gettext('encoder-2-1');
gettext('Encoder-4-2');
gettext('Encoder-4-2-Bus');
gettext('Encoder-4-2-Bus-neg');
gettext('Encoder-4-2-neg');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-Manual-testing');
gettext('4-2 Encoder');
gettext('2-4 Decoder');
gettext('## Example: Manual testing of the 4-to-2 Encoder Bus\n\nThe output of a 3-bit counter is decoded and encoded again. The result  \nis shown on the LEDs. The conter is increased when the button is  \npressed');
gettext('Output: Encoded number');
gettext('01-Manual-testing');
gettext('Alhambra-II');
gettext('01-Manual-testing');
gettext('## Example: Manual testing of the 4-to-2 Encoder-Neg\n\nThe output of a 3-bit counter is decoded and encoded again. The result  \nis shown on the LEDs. The conter is increased when the button is  \npressed');
gettext('01-Manual-testing');
gettext('## Example: Manual testing of the 4-to-2 Encoder\n\nThe output of a 3-bit counter is decoded and encoded again. The result  \nis shown on the LEDs. The conter is increased when the button is  \npressed');
gettext('Encoder-8-3');
gettext('Encoder-8-3-Bus');
gettext('Encoder-8-3-Bus-neg');
gettext('Encoder-8-3-neg');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-Manual-testing');
gettext('OR-Op8: Or operation between two numbers of 8 bits');
gettext('Or-Op4: Or operation between two numbers of 4 bits');
gettext('Bus4-Split-half: Split the 4-bits bus into two of the same size');
gettext('Bus4-Join-half: Join the two buses into a 4-bits Bus');
gettext('OR-Op2: Or operation between two numbers of 2 bits');
gettext('Copy-8: Copy the input wire and creates a 8 bits Bus output');
gettext('8-3 Encoder-Bus-neg');
gettext('3-8 Decoder-neg');
gettext('## Example: Manual testing of the 8-to-3 Encoder-Neg\n\nThe output of a 3-bit counter is decoded and encoded again. The result  \nis shown on the LEDs. The conter is increased when the button is  \npressed. The SW2 button is used to disable the input to the encoder  \n(so that it receives 0s on all its inputs)');
gettext('Enable/disable  \nthe input to the  \nEncoder');
gettext('Button state:\n* Not pressed: Encoder enabled\n* Pressed: Encoder disabled');
gettext('The encoder is disabled  \nwhen all its inputs are  \n1s');
gettext('Operand 1');
gettext('Operand 2');
gettext('01-Manual-testing');
gettext('AND-Busen-8: Enable a 8-bits bus. When the enable signal is 0, the output is 0');
gettext('AND-Busen-3: Enable a 3-bits bus. When the enable signal is 0, the output is 0');
gettext('8-3 Encoder-Bus');
gettext('## Example: Manual testing of the 8-to-3 Encoder-\n\nThe output of a 3-bit counter is decoded and encoded again. The result  \nis shown on the LEDs. The conter is increased when the button is  \npressed. The SW2 button is used to disable the input to the encoder  \n(so that it receives 0s on all its inputs)');
gettext('Alhambra-II');
gettext('01-Manual-testing');
gettext('8-3 Encoder-neg');
gettext('01-Manual-testing');
gettext('8-3 Encoder');
gettext('## Example: Manual testing of the 8-to-3 Encoder\n\nThe output of a 3-bit counter is decoded and encoded again. The result  \nis shown on the LEDs. The conter is increased when the button is  \npressed. The SW2 button is used to disable the input to the encoder  \n(so that it receives 0s on all its inputs)');
gettext('Encoder-2-1-Bus');
gettext('Encoder-2-1-Bus-neg');
gettext('Encoder-2-1-neg');
gettext('enconder-2-1');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# Encoder-2-1-Bus-neg: Manual testing\n\n');
gettext('01-manual-testing');
gettext('## Example: Manual testing of the 2-to-1 Encoder-Bus\n\nTwo pushbuttons are used as the inputs of the 2-to-1 enconder. The  \ncodified output (1-bit) is shown on LED7 and the nz output on LED0');
gettext('**2-1 Encoder-Bus**');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# Encoder-2-1-neg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-testing');
